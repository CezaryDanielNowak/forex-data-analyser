import React from 'react';
import PropTypes from 'prop-types';
import throttle from 'lodash/throttle';
import BaseComponent from 'components/BaseComponent';
import Spinner from 'sf/components/Spinner';

// when request is finished in less than TIMEOUT_THROTTLE, loader will not be shown
const TIMEOUT_THROTTLE = 250;

export default class GlobalLoader extends BaseComponent {
  className = 'ts-GlobalLoader';

  static propTypes = {
    theme: PropTypes.oneOf(['default', 'light']),
  };

  static defaultProps = {
    theme: 'light',
  };

  state = {
    isLoading: true,
  };

  throttledToggle = throttle(() => this.setState({ isLoading: true }), TIMEOUT_THROTTLE);

  toggleLoader = (xhrCount) => {
    if (xhrCount > 0) {
      this.throttledToggle();
    } else {
      this.throttledToggle.cancel();
      this.setState(() => ({
        isLoading: false,
      }));
    }
  }

  setCustomMessage = (message) => this.setState({
    customMessage: message,
  });

  toggle = (isOn) => this.setState({
    isLoading: isOn,
  });

  componentDidMount() {
    // HTML generated by backend needs to have GlobalLoader spinning until JS loads
    // and executes.
    /* eslint-disable */
    this.setState({ isLoading: false });
    /* eslint-enable */
    this.subscribe('XHR', this.toggleLoader);
    this.subscribe('GlobalLoader--toggle', this.toggle);
    this.subscribe('GlobalLoader--setCustomMessage', this.setCustomMessage);
  }

  renderCustomMessage() {
    if (this.state.customMessage) {
      return (
        <div className={ this.cn`__custom-message` }>
          { this.state.customMessage }
        </div>
      );
    }

    return null;
  }

  render() {
    const classNames = {
      [`--theme-${this.props.theme}`]: true,
    };
    if (this.state.isLoading) {
      return (
        <div className={ this.rootcn(classNames) }>
          { this.renderCustomMessage() }
          <Spinner
            className={ this.cn`__spinner` }
          />
        </div>
      );
    }
    return null;
  }
}
